const superagent = require('superagent')

const getRequest = (url, params, headers) => {
  if (headers == null)
    headers = {'Accept':'application/json'}

  return new Promise((resolve, reject) => {
    superagent.get(url)
    .query(params)
    .set(headers)
    .end((err, response) => {
      if (err){
        reject(err)
        return
      }

      // const payload = response.body || response.text
      let payload = null
      if (headers.Accept == 'application/json')
        payload = response.body || response.text

      resolve(payload)
    })
  })
}

const postRequest = (endpoint, params, headers) => {
	if (headers == null)
    headers = {'Accept':'application/json'}

	return new Promise((resolve, reject) => {
		superagent.post(endpoint)
		.send(params)
		.set(headers)
		.end((err, response) => {
			if (err){
				reject(err)
				return
			}

			// const payload = res.body || res.text
      let payload = null
      if (headers.Accept == 'application/json')
        payload = response.body || response.text

			resolve(payload)
		})
	})
}

module.exports = {
  get: getRequest,
  post: postRequest,
  slugVersion: (text, numRandomChars) => {
  	let slug = text.toString().toLowerCase()
  			.replace(/\s+/g, '-')           // Replace spaces with -
  			.replace(/[^\w\-]+/g, '')       // Remove all non-word chars
  			.replace(/\-\-+/g, '-')         // Replace multiple - with single -
  			.replace(/^-+/, '')             // Trim - from start of text
  			.replace(/-+$/, '');            // Trim - from end of text

  	if (numRandomChars == null)
  		return slug.toLowerCase()

  	if (numRandomChars <= 0)
  		return slug.toLowerCase()

  	var randomString = ''
  	var possible = 'abcdefghijklmnopqrstuvwxyz0123456789'
  	for (var i=0; i <numRandomChars; i++)
  		randomString += possible.charAt(Math.floor(Math.random() * possible.length))

  	return slug.toLowerCase()+'-'+randomString
  },

  truncateText: (text, limit) => {
  	if (text.length < limit)
  		return text

  	return text.substring(0, limit)+'...'
  },

  // human readable date
  formattedDate: (date) => {
    const options = {weekday:'long', year:'numeric', month:'long', day:'numeric'}
    if (date == null)
      date = new Date()
    return date.toLocaleDateString('en-US', options) // Monday, May 6, 2019
  },

  scrapeInstagram: (username, captionLimit) => {
    if (captionLimit==null)
      captionLimit = 70

    return new Promise((resolve, reject) => {
      const igUrl = 'https://www.instagram.com/'+username+'/?__a=1'
      getRequest(igUrl)
      .then(instagram => {
        const recentIGPosts = []
        if (instagram == null){
          resolve(recentIGPosts)
          return
        }

        // validate the fuck out of this:
        if (instagram.graphql == null){
          resolve(recentIGPosts)
          return
        }

        // this crashed a lot when IG throttles an ip address:
        if (instagram.graphql.user == null){
          resolve(recentIGPosts)
          return
        }

        if (instagram.graphql.user.edge_owner_to_timeline_media == null){
          resolve(recentIGPosts)
          return
        }

        if (instagram.graphql.user.edge_owner_to_timeline_media.edges == null){
          resolve(recentIGPosts)
          return
        }

        // instagram feed:
        const feed = instagram.graphql.user.edge_owner_to_timeline_media.edges
        feed.forEach(postData => {
          if (postData.node != null){
            const post = {}
            post.shortcode = postData.node.shortcode
            post.image = postData.node.thumbnail_src
            post.caption = postData.node.edge_media_to_caption.edges[0].node.text
            post.caption = post.caption.substring(0, captionLimit)+'...'
            recentIGPosts.push(post)
          }
        })

        resolve(recentIGPosts)
      })
      .catch(err => {
        reject(err)
      })
    })
  },

  scrapePreview: (text, limit) => {
    return new Promise((resolve, reject) => {
      if (text==null || text==undefined){
        resolve(null)
        return
      }

      superagent.post('https://platform.turbo360-vector.com/scrapepreview')
      .send({text:text, limit:limit})
      .set('Accept', 'application/json')
      .end((err, response) => {
        if (err){
          reject(err)
          return
        }

        const payload = response.body
        resolve(payload)
      })
    })
  }

}
